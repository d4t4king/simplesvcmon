#!/usr/bin/env python3

import argparse
import pprint
#from typing import Tuple
from termcolor import cprint, colored
import atexit
import subprocess
import os
import sys
import re
import datetime

from utils.sql import sql
from utils import utils

def cleanup(file):
    ###	clean up
    os.remove(file)

def get_banner(nmap, host, ports):
    if isinstance(ports, list):
        cmd = ("{nm} -sT -p {p} --script banner ".format(nm=nmap, \
                p=",".join([str(p) for p in ports])),
            "--reason {h} | grep 'banner' | cut -d: -f2- "\
                .format(h=host), \
            " | sed -e 's/^ //g'")
    elif isinstance(ports, int):
        cmd = ("{nm} -sT -p {p} --script banner ".format(nm=nmap, \
                p=ports),
            "--reason {h} | grep 'banner' | cut -d: -f2- "\
                .format(h=host), \
            " | sed -e 's/^ //g'")
    else:
        raise TypeError("Unrecognized type for ports: {}"\
            .format(type(ports)))
    cprint("{}".format("".join(cmd)), "cyan")
    #exit(1)
    output = os.popen("".join(cmd)).read().strip()
    return output


def get_server_header(nmap, params, sqlu):
    assert isinstance(params, dict), \
        "params must be a dict() containing host and port IDs"
    cmd = ("{nm} -sT -p {p} --script http-server-header ".format(nm=nmap, \
                p=sqlu.get_port(params['port_id'])),
            "{h} | grep 'http-server-header' | cut -d: -f2- "\
                .format(h=sqlu.get_host(params['host_id'], True)), \
            " | sed -e 's/^ //g'")
    cprint("{}".format("".join(cmd)), "magenta")
    output = os.popen("".join(cmd)).read().strip()
    return output

def get_http_title(nmap, params, sqlu):
    assert isinstance(params, dict), \
        "params must be a dict() containing host and port IDs"
    cmd = ("{nm} -sT -p {p} --script http-title ".format(nm=nmap, \
                p=sqlu.get_port(params['port_id'])),
            "{h} | grep 'http-title' | cut -d: -f2- "\
                .format(h=sqlu.get_host(params['host_id'], True)), \
            " | sed -e 's/^ //g'")
    cprint("{}".format("".join(cmd)), "yellow")
    output = os.popen("".join(cmd)).read().strip()
    return output


def main():
    try:
        pp = pprint.PrettyPrinter(indent=4)

        today = datetime.datetime.now()

        parser = argparse.ArgumentParser("get more info about findings")
        parser.add_argument('-s', '--service', dest='service', required=True, \
            help="Service to investigate.")
        parser.add_argument('-v', '--verbose', dest='v', action='store_true', \
            help="Make output more verbose.")
        args = parser.parse_args()

        # check for existing pid file
        pidfile = '/tmp/gather.pid.run'
        if os.path.exists(pidfile):
            eprint(colored("PID file exists.  Is store already running?", "red", attrs=['bold']))
            raise Exception("Verify if the program is currently running and/or delete the file at {}".format(pidfile))

        # register the cleanup function to run at exit
        atexit.register(cleanup, pidfile)

        # set up the sql object
        sqlu = sql.sqlutils()
        # get the config info
        conf = sqlu.load_config()

        ### set pid file
        with open(pidfile, 'w') as pidf:
            pidf.write(str(os.getpid()))

        # start logging (?)

        print("Available services: {}".format("|".join(sqlu.svc_ports.keys())))
        # take 'proto' in from argv (?) and verify it is valid
        hosts = []
        # get all of the ips in the database that reported the relevant port open
        if re.search(r"(?:{})".format("|".join(sqlu.svc_ports.keys())), args.service) \
            is not None:
            if args.v: print("Service ({}) matched an expected service."\
                .format(args.service))
            if isinstance(sqlu.svc_ports[args.service], list):
                if args.v: print("Service has more than one port: {}"\
                    .format(sqlu.svc_ports[args.service]))
                for p in sqlu.svc_ports[args.service]:
                    hosts.extend(sqlu.get_hosts_by_port(p))
            else:
                hosts = sqlu.get_hosts_by_port(sqlu.svc_ports[args.service])
        # set the nmap path

        ### FIX ME
        # Should this be the other way around?  If conf['nmap_path'] is specified, 
        # use that over the environment nmap?
        nmap = utils.utils.which('nmap') \
            if utils.utils.which('nmap') else conf['nmap_path']
        if nmap is None and conf['nmap_path'] is None:
            print("You must install nmap or update the config with the path to the nmap executable.")
            exit(1)

        # loop through the list of targets and grab the banners for the protocol
        print("{}".format(hosts))
        print("nmap={}".format(nmap))
        for h in hosts:
            if utils.utils.is_alive(h):
                banner = get_banner(nmap, h, sqlu.svc_ports[args.service])
                #print("|{}|".format(banner))
            # check if the banner is stored
                params = {}
                params['banner'] = banner
                params['host_id'] = sqlu.get_host_id(h)
                #print("args.service: {}".format(args.service))
                #print("sqlu.svc_ports[{s}]: {p}".format(
                    #s=args.service, p=sqlu.svc_ports[args.service]))
                params['port_id'] = sqlu.get_port_id(sqlu.svc_ports[args.service])

                if sqlu.banner_exists(params):
            #   if it is stored,
            #   check if the one we just grabbed is the same as the stored one
                    print("Banner exists: {b}".format(b=banner))
                else:
                    params['first_found'] = today.strftime('%s')
                    params['last_found'] = today.strftime('%s')
                    sqlu.add_banner(params)

                params = {}
                params['host_id'] = sqlu.get_host_id(h)
                params['port_id'] = sqlu.get_port_id(sqlu.svc_ports[args.service])
                if 'http' in args.service:
                    # get server header and title
                    params['sqlu'] = sqlu
                    header = get_server_header(nmap, params, sqlu)
                    del(params['sqlu'])
                    print("Header: {}".format(header))
                    params['server_header'] = header
                    #params['header_first_found'] = today.strftime('%s')
                    #params['header_last_updated'] = today.strftime('%s')
                    pp.pprint(params)
                    to_add = params
                    if sqlu.http_meta_exists(params):
                        cprint("Server header record exists.: {}"\
                            .format(header), "yellow", attrs=['bold'])
                    else:
                        to_add['header_first_found'] = today.strftime('%s')
                        to_add['header_last_updated'] = today.strftime('%s')
                    title = get_http_title(nmap, params, sqlu)
                    print("Title: {}".format(title))
                else:
                    cprint("Service not HTTP(S): {}".format(args.service), "yellow")
                if h == '192.168.1.14':
                    exit(0)
            else:
                print("Host offline ({h})".format(h=h))
    except KeyboardInterrupt:
        utils.utils.cleanup(pidfile)
        exit(0)

if __name__=='__main__':
    main()
