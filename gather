#!/usr/bin/env python3

import argparse
import pprint
from termcolor import cprint, colored
import atexit
import subprocess
import os
import sys
import re

from utils.sql import sql
from utils import utils

def cleanup(file):
    ###	clean up
    os.remove(file)


def main():
    pp = pprint.PrettyPrinter(indent=4)

    parser = argparse.ArgumentParser("get more info about findings")
    parser.add_argument('-s', '--service', dest='service', required=True, \
        help="Service to investigate.")
    parser.add_argument('-v', '--verbose', dest='v', action='store_true', \
        help="Make output more verbose.")
    args = parser.parse_args()

    # check for existing pid file
    pidfile = '/tmp/store.pid.run'
    if os.path.exists(pidfile):
        eprint(colored("PID file exists.  Is store already running?", "red", attrs=['bold']))
        raise Exception("Verify if the program is currently running and/or delete the file at {}".format(pidfile))

    # register the cleanup function to run at exit
    atexit.register(cleanup, pidfile)

    # set up the sql object
    sqlu = sql.sqlutils()
    # get the config info
    conf = sqlu.load_config()
    u = utils.utils()

    ### set pid file
    with open(pidfile, 'w') as pidf:
        pidf.write(str(os.getpid()))

    # start logging (?)

    print("Available services: {}".format("|".join(sqlu.svc_ports.keys())))
    # take 'proto' in from argv (?) and verify it is valid
    hosts = []
    # get all of the ips in the database that reported the relevant port open
    if re.search(r"(?:{})".format("|".join(sqlu.svc_ports.keys())), args.service) \
        is not None:
        if args.v: print("Service ({}) matched an expected service."\
            .format(args.service))
        if isinstance(sqlu.svc_ports[args.service], list):
            if args.v: print("Service has more than one port: {}"\
                .format(sqlu.svc_ports[args.service]))
            for p in sqlu.svc_ports[args.service]:
                hosts.extend(sqlu.get_hosts_by_port(p))
        else:
            hosts = sqlu.get_hosts_by_port(sqlu.svc_ports[args.service])
    # set the nmap path
    nmap = u.which('nmap') if u.which('nmap') else conf['nmap_path']
    if nmap is None and conf['nmap_path'] is None:
        print("You must install nmap or update the config with the path.")
        exit(1)
    # loop through the list of targets and grab the banners for the protocol
    print("{}".format(hosts))
    print("nmap={}".format(nmap))
    for h in hosts:
        cmd = ("{nm} -sT -p {p} --script banner ".format(nm=nmap, \
                    p=",".join([str(p) for p in sqlu.svc_ports[args.service]])),
                "--reason {h} | grep 'banner' | cut -d: -f2- "\
                    .format(h=h), \
                " | sed -e 's/^ //g'")
        print("{}".format("".join(cmd)))
        #exit(1)
        output = os.popen("".join(cmd)).read().strip()
        print("|{}|".format(output))
    # check if the banner is stored
    #   if it is stored,
    #   check if the one we just grabbed is the same as the stored one



if __name__=='__main__':
    main()
