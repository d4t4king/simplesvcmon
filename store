#!/usr/bin/env python3

import pprint
import sqlite3
from termcolor import cprint, colored
import sys
import os
import datetime
import xml.etree.ElementTree as et
import xmltodict
import untangle
import atexit
import re
import socket
from utils.sql import sql


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def cleanup(file):
    ###	clean up
    os.remove(file)


def get_xml_addrlist(xmlfile, sort=False):
    import xml.etree.ElementTree as et
    tree = None
    try:
        tree = et.parse(xmlfile)
    except et.ParseError as err:
        if 'unclosed token' in str(err):
            print("Truncated XML file ({})".format(xmlfile), file=sys.stderr)
            return None
        else:
            raise err
    root = tree.getroot()
    addrs = []
    for a in root.iter('address'):
        addr = a.get('addr')
        if addr not in addrs:
            addrs.append(addr)
    if sort:
        addrs = sorted(addrs, key=lambda ip: \
            (int(ip.split('.')[0]),
             int(ip.split('.')[1]),
             int(ip.split('.')[2]),
             int(ip.split('.')[3])))
    return addrs


def main():
    pp = pprint.PrettyPrinter(indent=4)

    protected_directories = ['./utils', './.git']

    # check for existing pid file
    pidfile = '/tmp/store.pid.run'
    if os.path.exists(pidfile):
        eprint(colored("PID file exists.  Is store already running?", "red", attrs=['bold']))
        raise Exception("Verify if the program is currently running and/or delete the file at {}".format(pidfile))

    # register the cleanup function to run at exit
    atexit.register(cleanup, pidfile)

    ### set pid file
    with open(pidfile, 'w') as pidf:
        pidf.write(str(os.getpid()))


    # initialize some important variables
    today = datetime.datetime.now()
    dd = int(today.strftime('%s')) - 86400
    last_24 = datetime.datetime.fromtimestamp(dd)
    # set up/connect to the DB
    db = sql.sqlutils()
    conf = db.load_config()
    files_to_process = []

    ### findall *.xml files in protocol directories
    for root, dirs, files in os.walk(conf['working_dir']):
        for file in files:
            # skip empty files
            # but don't delete empty files from protected directories
            cprint("root={}".format(root), "magenta", attrs=['bold'])
            cprint("realroot={}".format(os.path.split(root)[0]), "magenta")
            cprint("Protected: True", "green") if os.path.split(root)[0] in protected_directories else cprint("Protected: False", "red", attrs=['bold'])
            if os.path.split(root)[0] in protected_directories:
                cprint("Skipping {}...".format(os.path.join(root, file)), \
                    "yellow")
                continue
            if os.path.getsize(os.path.join(root, file)) == 0:
                os.remove(os.path.join(root, file))
                continue
            if file.endswith('.xml'):
                files_to_process.append(os.path.join(root, file))

    # print(str(dir(db)))
    db.dbsetup()
#     print("""dbtype: {0}
# dbfile: {1}
# server: {2}
# database: {3}
# user: {4}
# pass: {5}
# port: {6}""".format(db.dbtype, db.dbfile, db.host, db.database, \
#                     db.user, db.passw, db.port))

    filecount = len(files_to_process)
    print("Found {} files to process.".format(filecount))
    ### Loop through the files
    for f in files_to_process:
        ###		read in the xml
        #print(str(filecount))
        #print("f={}".format(f))
        with open(f, 'r') as xml:
            obj = untangle.parse(xml)
            cprint(obj, "yellow")
            for host in obj.nmaprun.host:
                cprint(host, "green")
                if db.host_exists(host.address['addr']):
                    host_id = db.get_host_id(host.address['addr'])
                    print('Host exists: {} ({})'.format( \
                        host.address['addr'], host_id))
                else:
                    fields = {}
                    if re.search(r'(?:\d{1,3}\.){3}\d{1,3}', \
                            host.address['addr']) is not None:
                        #print("Host looks like an IP address: {}"\
                        #    .format(host.address['addr']))
                        fields['ipv4addr'] = \
                            host.address['addr'] \
                                if host.address['addrtype'] == 'ipv4' else None
                        fields['hostname'] = None
                        try:
                            fields['hostname'] = \
                                str(socket.gethostbyaddr(host.address['addr'])[0])
                        except socket.herror as err:
                            fields['hostname'] = 'unresolved'
                    else:
                        #print("Host looks like an FQDN: {}"\
                        #    .format(host.address['addr']))
                        fields['hostname'] = host.address['addr']
                        fields['ipv4address'] = None
                        try:
                            fields['ipv4address'] = socket\
                                .gethostbyname(host.address['addr'])
                        except socket.gaierror as err:
                            fields['ipv4address'] - 'unresolved'
                    #print("fields: {}".format(fields))
                    db.add_host(fields)
                if db.port_exists(host.ports.port['portid']):
                    port_id = db.get_port_id(host.ports.port['portid'])
                    print("Port exists: {} ({})".format( \
                        host.ports.port['portid'], port_id))
                else:
                    fields = {}
                    fields['port_num'] = int(host.ports.port['portid'])
                    db.add_port(fields)
                if db.found_exists(host.address['addr'], host.ports.port['portid']):
                    rcd_id = db.get_found_id(host.address['addr'], host.ports.port['portid'])
                    print("Found record exists: {}:{} ({})" \
                          .format(host.address['addr'], host.ports.port['portid'], \
                                  rcd_id))
                    #print("Today is {}. EndTime is {}.".format( \
                    #    today.strftime('%s'), host['endtime']))
                    fields = ('last_found', int(host['endtime']))
                    conds = ('service_id', db.get_port_id(host.ports.port['portid']), \
                        'host_id', db.get_host_id(host.address['addr']))
                    db.update_found(fields, conds)
                else:
                    fields = {}
                    if re.search(r'(?:\d{1,3}\.){3}\d{1,3}', host.address['addr']) is not None:
                        fields['host'] = \
                            host.address['addr'] if host.address['addrtype'] == 'ipv4' else None
                    else:
                        fields['host'] = host.address['addr']
                    fields['host_id'] = db.get_host_id(fields['host'])
                    fields['service_id'] = db.get_port_id(host.ports.port['portid'])
                    fields['first_found'] = today.strftime('%s')
                    fields['last_found'] = today.strftime('%s')
                    fields['scan_count'] = db._increment_scan_count(\
                        fields['host'],host.ports.port['portid'])
                    del(fields['host'])
                    db.add_found(fields)
        filecount -= 1


if __name__ == '__main__':
    main()
