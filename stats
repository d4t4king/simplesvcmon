#!/usr/bin/env python3

import sys
import os
from termcolor import cprint, colored
import argparse
import pprint

from utils.sql import sql

def main():
    parser = argparse.ArgumentParser('get stats from db')
    parser.add_argument('action', help="Which stats you want?")
    args = parser.parse_args()

    # all these stats are in the db (somewhere), so set up the semi-"global"
    # db object to the utils class
    db = sql.sqlutils(dbtype='sqlite3', dbfile='scandata.db')

    pp = pprint.PrettyPrinter(indent=4)

    if 'records' in args.action:
        # print out stats about the records:
        #   how many total?
        #   how many dupes (if any)
        field = 'id'
        print("ID/record counts:")
        for tbl in sorted(db.TABLES):
            if 'config' in tbl:
                print("\tTable: {tn}, Count: {cnt}"\
                    .format(tn=tbl, cnt=db._get_record_count(tbl)))
            else:
                print("\tTable: {tn}, Count: {cnt}"\
                    .format(tn=tbl, cnt=db._get_record_count(tbl, field, True)))
        print("\n")
        print("Distinct IP addresses:")
        print("\tTable: {tn}, Count: {cnt}"\
            .format(tn='hosts', cnt=db._get_record_count('hosts', 'ipv4addr', True)))
        print("Distinct hostnames:")
        print("\tTable: {tn}, COunt: {cnt}"\
            .format(tn='hosts', cnt=db._get_record_count('hosts', 'hostname', True)))
    elif 'ports' in args.action:
        field = 'port_num'
        print("{} unique ports scanned to date."\
            .format(db._get_record_count('ports', field, True)))
        print()
        conf = db.load_config()
        counts = {}
        for s in conf['services'].split(','):
            counts[s] = db.get_hostcount_by_port(db.svc_ports[s])
        for p in sorted(counts.keys()):
            in_db = False
            if db.port_exists(db.svc_ports[p]):
                in_db = colored(u'\u2714', "green")
            else:
                in_db = colored(u'\u2718', "red")
            print("{0:10s} {1:12d} {2:2s}".format(p, counts[p], in_db))
    elif 'config' in args.action:
        pp.pprint("{}".format(db.load_config()))
    elif 'times' in args.action:
        # print stats about times
        #   mainly scan times
        #   most relevant for vuln and gather
        #   that will actually take some time
        pass
    else:
        raise Exception("Don't know how to process action: {}"\
            .format(args.action))

if __name__=='__main__':
    main()
